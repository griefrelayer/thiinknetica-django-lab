from django.db import models
from django.contrib.auth import get_user_model
from django.contrib.auth.models import Group
from django.db.models.signals import post_save
from django.dispatch import receiver
from django.core.mail import send_mail
from django.template.loader import render_to_string
from django.contrib.contenttypes.models import ContentType
from django.contrib.postgres.fields import ArrayField
from django.shortcuts import reverse

from sorl.thumbnail import ImageField

from .tasks import email_subs_on_new_ad
from .utils import unique_slug_generator, validate_inn


User = get_user_model()   # Customized user model instead of builtin one

# Groups


@receiver(post_save, sender=User)
def create_user_profile(sender, instance, created, **kwargs):
    """New users actions"""
    if created:
        # Add user to the "common_users" group
        group_instance, _ = Group.objects.get_or_create(name='common_users')
        instance.groups.add(group_instance.id)
        # Send welcoming email letter
        send_mail("Добро пожаловать на example.com",
                  "", 'admin@example.com',
                  [instance.email], fail_silently=False, auth_user=None, auth_password=None,
                  connection=None, html_message=render_to_string('account/email/email_confirmation_message.html',
                                                                 context={'user': instance}))

# Create your models here.


class Subscriber(models.Model):
    """Subscriber model is for mail subscribing on new ads"""
    user = models.ForeignKey(User, on_delete=models.CASCADE, verbose_name='Подписчик(пользователь)')
    subscribed_to = models.CharField(max_length=30, verbose_name='На что подписан')


class Seller(User):
    """This is Seller model, it handles all fields connected to Seller
    seller_object.ads shows count of current seller's ads"""

    inn = models.CharField(max_length=12, default='000000000000', verbose_name='ИНН', validators=[validate_inn])
    picture = ImageField(upload_to='uploads/seller_pics/', default='uploads/seller_pics/default.jpg', null=False)

    @property
    def ads(self):
        return Ad.objects.filter(seller=self).count()

    def __str__(self):
        if self.first_name or self.last_name:
            ret = self.first_name + " " + self.last_name
        else:
            ret = self.username
        return ret


class Category(models.Model):
    """This is Category model, with name and slug that is autogenerated for each added category"""
    name = models.CharField(max_length=100)
    slug = models.SlugField(unique=True)

    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = unique_slug_generator(self)
        super(Category, self).save(*args, **kwargs)

    def __str__(self):
        return self.name


'''class Tag(models.Model):
    """This is Tag model, handling tags in ads"""
    name = models.CharField(max_length=100)

    def __str__(self):
        return self.name'''


class AbstractAd(models.Model):
    """This is abstract class for any ad. Ad models is inherited from here."""
    name = models.CharField(max_length=100, verbose_name='Название объявления')
    description = models.CharField(max_length=500, verbose_name='Описание')
    category = models.ForeignKey(Category, null=True, on_delete=models.SET_NULL, verbose_name='Категория')
    seller = models.ForeignKey(Seller, on_delete=models.CASCADE, verbose_name='Продавец')
    datetime_created = models.DateTimeField(auto_now_add=True, verbose_name='Дата/время создания')
    datetime_modified = models.DateTimeField(auto_now=True, verbose_name='Дата/время изменения')
    tags = ArrayField(models.CharField(max_length=100), verbose_name='Теги', null=True)
    price = models.PositiveIntegerField(blank=False, default=1, verbose_name='Цена')
    is_sold = models.BooleanField(default=False, verbose_name='Продано')
    is_active = models.BooleanField(default=True, verbose_name='Активно')
    ad_type = models.ForeignKey(ContentType, editable=False, on_delete=models.CASCADE, null=True)

    class Meta:
        abstract = True


class Ad(AbstractAd):
    """This class is parent to Car, Thing, Service and ArchiveAd"""

    def save(self, *args, **kwargs):
        if self._state.adding:
            self.ad_type = ContentType.objects.get_for_model(type(self))
        super().save(*args, **kwargs)

    def get_actual_instance(self):
        my_info = (self._meta.app_label, self._meta.model_name)
        actual_info = (self.ad_type.app_label, self.ad_type.model)
        if type(self) != Ad or my_info == actual_info:
            # If this is already the actual instance
            return self
        # Otherwise
        attr_name = '{}_ptr_id'.format(Ad._meta.model_name)
        return self.ad_type.get_object_for_this_type(**{
            attr_name: self.pk,
        })


class Car(Ad):
    """This model is made specifically for dealing with cars ads"""
    brand = models.CharField(max_length=50, verbose_name='Марка')
    mileage = models.PositiveIntegerField(verbose_name='Пробег')
    color = models.CharField(max_length=50, verbose_name='Цвет')

    def __str__(self):
        return self.name

    def get_absolute_url(self):
        return reverse('car_detail', args=[self.pk])


class Thing(Ad):
    """This model is made for dealing with various ads"""
    weight = models.PositiveIntegerField(verbose_name='Вес')
    size = models.CharField(blank=True, max_length=50, verbose_name='Размеры')

    def __str__(self):
        return self.name

    def get_absolute_url(self):
        return reverse('thing_detail', args=[self.pk])


class Service(Ad):
    """This model is made specifically for dealing with service ads"""
    area = models.CharField(max_length=100, verbose_name='Доступно в')

    def __str__(self):
        return self.name

    def get_absolute_url(self):
        return reverse('service_detail', args=[self.pk])


class Picture(models.Model):
    """Picture model"""
    pic = ImageField(upload_to='uploads/ad_pics/', null=False)
    ad = models.ForeignKey(Ad, on_delete=models.CASCADE, null=False)

    def __str__(self):
        return self.pic.path


class SMSLog(models.Model):
    """Phone number verify related model"""
    user = models.OneToOneField(User, on_delete=models.CASCADE, null=True)
    generated_code = models.CharField(max_length=4)
    phone_number = models.CharField(max_length=12)
    provider_response = models.CharField(max_length=150, null=True)
    verified = models.BooleanField(default=False)


# Signals
@receiver(post_save, sender=Car)
@receiver(post_save, sender=Thing)
@receiver(post_save, sender=Service)
def create_new_ad_actions(sender, instance, created, **kwargs):
    """Sends email to subscribers about new ads"""
    if created:
        email_subs_on_new_ad.delay(instance._meta.model_name, instance.pk,
                                   [x.user.email for x in
                                    Subscriber.objects.filter(subscribed_to=instance._meta.model_name + "s")])
